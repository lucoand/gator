// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
	INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
		VALUES (
		$1,
		$2,
		$3,
		$4,
		$5
		)
		RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
	inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
	feeds.name as feed_name,
	users.name as user_name
FROM inserted_feed_follow
INNER JOIN feeds
ON feeds.id = inserted_feed_follow.feed_id
INNER JOIN users
ON users.id = inserted_feed_follow.user_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollowByUserNameAndFeedUrl = `-- name: DeleteFeedFollowByUserNameAndFeedUrl :one
WITH deleted AS (
DELETE FROM feed_follows
USING users, feeds
WHERE users.id = feed_follows.user_id
AND feeds.id = feed_follows.feed_id
AND users.name = $1
AND feeds.url = $2
RETURNING 1
)
SELECT COUNT(*) FROM deleted
`

type DeleteFeedFollowByUserNameAndFeedUrlParams struct {
	UserName string
	FeedUrl  string
}

// @param user_name: string
// @param feed_url: string
func (q *Queries) DeleteFeedFollowByUserNameAndFeedUrl(ctx context.Context, arg DeleteFeedFollowByUserNameAndFeedUrlParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollowByUserNameAndFeedUrl, arg.UserName, arg.FeedUrl)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
	feeds.name AS feed_name,
	users.name as user_name
FROM feed_follows
INNER JOIN feeds
ON feeds.id = feed_follows.feed_id
INNER JOIN users
ON users.id = feed_follows.user_id
WHERE users.name = $1
`

type GetFeedFollowsForUserRow struct {
	FeedName string
	UserName string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.FeedName, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
